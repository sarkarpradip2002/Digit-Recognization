# -*- coding: utf-8 -*-
"""Digit Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eLpkRiOLbWol9nJMnGyJ4PvIZYxkDQqu
"""

# Commented out IPython magic to ensure Python compatibility.
from tensorflow import keras
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np

(x_train,y_train),(x_test,y_test)=keras.datasets.mnist.load_data();

print(len(x_train))
print(len(x_test))

x_train[0].shape

plt.matshow(x_train[0])

x_train=x_train/255
x_test=x_test/255
x_train[0]

x_train_flatterned=x_train.reshape(len(x_train),28*28)
x_test_flatterned=x_test.reshape(len(x_test),28*28)

print(x_train_flatterned.shape)
print(x_test_flatterned.shape)

model=keras.Sequential([
                  keras.layers.Conv2D(filters=32, kernel_size=(3,3),activation='relu',input_shape=(28,28,1)), 
                  keras.layers.MaxPooling2D((2,2)),

                  keras.layers.Conv2D(filters=64, kernel_size=(3,3),activation='relu'),
                  keras.layers.MaxPooling2D((2,2)),

                        keras.layers.Flatten(),
                        keras.layers.Dense(100,activation='relu'),
                        keras.layers.Dense(10,activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train,y_train,epochs=5)

model.evaluate(x_test, y_test)

def predict_digit(img):
    # img_flattern=x_train.reshape(1,28*28)
    predict=model.predict(img)
    final_digit=np.argmax(predict)
    return final_digit

# pickle.dump(model,open('model.pkl','wb'))
# model=pickle.load(open('model.pkl','rb'))

